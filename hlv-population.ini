# configuration file describing the astrophysical population we wish to simulate
# Reed Essick (reed.essick@gmail.com)

#-------------------------------------------------

### define cosmological parameters (flat LambdaCDM cosmology)
### Planck 2018 Cosmology (Table1 in arXiv:1807.06209)
[Cosmology]
# CGS units for 67.32 km/s/Mpc
Ho = 2.1816926176539463e-18
OmegaMatter = 0.3158
OmegaRadiation = 0.0
OmegaLambda = 0.6842

#-------------------------------------------------

### define distributions without parameters

[ZeroEccentricity]

[IsotropicRA]

[IsotropicDec]

[IsotropicInclination]

[RandomPolarization]

[RandomCoalescencePhase]

#-------------------------------------------------

### define "uninteresting" parameters

[UniformTime]
t0 = 0.0
dur = 86400

#-------------------------------------------------

### define "interesting" parameters

[MadauDickinsonRedshift]
# Redshift distribution between z_min and z_max that follows the Madau-Dickinson star-formation rate (SFR)
#     p(z) ~ d(Vc)/dz * (1+z)**-1 * sfr(z)
# where
#     sfr(z) ~ (1 + z)**num_exp / (1 + (den_coef * (1 + z))**den_exp)
# and
#     z_min <= z <= z_max
# Parametrization and default parameters are taken from Eq 15 of https://arxiv.org/pdf/1403.0007.pdf

z_min = 0.0
z_max = 10.0

num_exp = 2.7
den_exp = 5.6
# 1/2.9 = 0.3448275862068966
den_coef = 0.3448275862068966

[NPiecePowerLawMass1]
# simple power law with hard cut-off and abrupt transitions between components
#     mass1 ~ \prod_0^{N-1} (break_i <= mass1)*( (mass1 < break_(i+1)) \
#                * (mass_1/break_1) + (mass1 >= break_(i+1))*(break_(i+1)/break_i) )**alpha_i

mmin = 0.5
alpha0 = 0.0
break1 = 3.0
alpha1 = -3.0
break2 = 5.0
alpha2 = -1.3
mmax = 1000.0

[PowerLawMass2]
# implements a power law distribution for m2 given m1
# if beta == -1:
#     p(mass2|mass1) = mass2**-1 / log(mass1/mass2_min)
# else
#     p(mass2|mass1) = (beta+1) * mass2**beta / (mass1**(beta+1) - mass2_min**(beta+1))
# with
#     mass2_min <= mass2 <= mass1

mass2_min = 0.5
beta = 1.0

[IsotropicPowerLawSpin1Spin2]
# Generate isotropically distributed spin orientations. The magnitudes are distributed according to a power law.
#     p(spin1x, spin1y, spin1z, spin2x, spin2y, spin2z) = \
#         IsotropicPowerLawSpin(spin1x, spin1y, spin1z) \
#         * IsotropicPowerLawSpin(spin2x, spin2y, spin2z)

a1_min = 0.0
a1_max = 1.0
a1_pow = 0.0

a2_min = 0.0
a2_max = 1.0
a2_pow = 0.0

#-------------------------------------------------

### optional parameters, in case one wants to be fancy

#[FixedEoSLambda1Lambda2]
# eospath = 
# mass_column = 
# lambda_column = 
# central_density_column = 

#-------------------------------------------------

### define derived variates

[Redshift2LuminosityDistance]
# cosmological parameters read from [Cosmology]

[SourceMass2DetectorMass]
mass_names = mass1_source mass2_source

[Spins2Chi]

#-------------------------------------------------

### define transforms to compute waveforms, SNR

[Waveform]
waveform_flow = 5
waveform_fhigh = 4096

# seglen = 8 sec
deltaf = 0.125

fref = 100

approximant = IMRPhenomXPHM

[ProjectedStrain]
network = hlv-network.ini

[OptimalSNR]
network = hlv-network.ini
snr_flow = 5
snr_fhigh = 4096

[ObservedSNRGivenOptimalSNR]
# assumes stationary Gaussian noise
detectors = H_aligo-design L_aligo-design V_advirgo-design

#-------------------------------------------------

### define detection criteria 

[Detection Criterion]
check = lambda event : event['observed_phase_maximized_snr_net'] >= 4.0
